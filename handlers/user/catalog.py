import logging
import sqlite3
from collections import defaultdict
from itertools import product

from aiogram import Router
from aiogram.types import CallbackQuery, InlineKeyboardButton, InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.admin.menu_images import get_menu_images_from_db
from database.admin.products import get_categories_from_db, get_products_by_category
from database.db import DB_NAME
from helpers.user.load_photos import load_product_photo

user_cart = defaultdict(list)

router = Router()


@router.callback_query(lambda c: c.data == 'catalog')
async def start_adding_category(c: CallbackQuery):
    await c.message.delete()

    categories = get_categories_from_db()
    menu_images = get_menu_images_from_db()

    image_path = None
    for menu_image in menu_images:
        if menu_image[2] == "–ö–∞—Ç–∞–ª–æ–≥":
            image_path = menu_image[1]
            break

    category_kb = InlineKeyboardBuilder()
    for category in categories:
        category_kb.add(
            InlineKeyboardButton(
                text=category['name'],
                callback_data=f"choose_category_{category['name']}"
            )
        )

    if image_path:
        try:
            photo = await load_product_photo(image_path)
            await c.message.answer_photo(
                photo, caption="–ö–∞—Ç–∞–ª–æ–≥", parse_mode="Markdown", reply_markup=category_kb.as_markup()
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await c.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=category_kb.as_markup())
    else:
        await c.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=category_kb.as_markup())


@router.callback_query(lambda c: c.data.startswith("choose_category_"))
async def catalog(callback_query: CallbackQuery):
    category_name = callback_query.data.split("_", maxsplit=2)[2]

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT id, name FROM catalog_products WHERE category = ?", (category_name,))
    products = cursor.fetchall()
    conn.close()

    if not products:
        await callback_query.message.answer(f"–ö–∞—Ç–∞–ª–æ–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –ø—É—Å—Ç. ‚ùå")
        await callback_query.answer()
        return

    product_kb = InlineKeyboardBuilder()
    for product_id, product_name in products:
        # –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –∫–∞–≤—ã—á–µ–∫ –∏ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ product_name
        product_name_encoded = product_name.replace(" ", "_").replace("'", "''")
        product_kb.add(
            InlineKeyboardButton(text=product_name, callback_data=f"product_{product_id}_{product_name_encoded}")
            # –ø–µ—Ä–µ–¥–∞–µ–º –∏–º—è —Ç–æ–≤–∞—Ä–∞
        )

    menu_images = get_menu_images_from_db()
    photo = None
    for menu_image in menu_images:
        if menu_image[2] == "–ö–∞—Ç–∞–ª–æ–≥":
            try:
                photo = await load_product_photo(menu_image[1])
                break
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")

    if photo:
        await callback_query.message.edit_media(
            InputMediaPhoto(media=photo, caption=f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{category_name}*: üëá"),
            reply_markup=product_kb.as_markup()
        )
    else:
        await callback_query.message.answer(
            f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{category_name}*: üëá",
            parse_mode="Markdown", reply_markup=product_kb.as_markup()
        )

    await callback_query.answer()


@router.callback_query(lambda c: c.data.startswith("product_"))
async def show_product_details(callback_query: CallbackQuery):
    data = callback_query.data.split("_")
    product_id = int(data[1])

    product_name = " ".join(data[2:]).replace("_", " ")

    logging.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å ID: {product_id} –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º {product_name}")

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT name, desc, price, image_path FROM catalog_products WHERE id = ?", (product_id,))
    product = cursor.fetchone()
    conn.close()

    if not product:
        await callback_query.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback_query.answer()
        return

    product_name, description, price, image_paths = product
    photo_paths = image_paths.split('|')

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    user_id = callback_query.from_user.id
    cart = user_cart[user_id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
    existing_item = next((item for item in cart if item['product_id'] == product_id), None)
    quantity = existing_item[
        'quantity'] if existing_item else 1  # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ, –±–µ—Ä–µ–º –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∏–Ω–∞—á–µ 1

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = f"*{product_name}*\n\n{description}\nüí∞ *–¶–µ–Ω–∞:* {price * quantity} —Ä—É–±.\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    kb = InlineKeyboardBuilder()
    if quantity > 1:
        kb.row(InlineKeyboardButton(text="‚ûñ –û—Ç–Ω—è—Ç—å 1", callback_data=f"decrease_{product_id}"))
    kb.row(InlineKeyboardButton(text="üõí Buy", callback_data=f"p_ch_buy_{product_id}_{price}_{product_name}_{quantity}"))
    kb.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å 1", callback_data=f"increase_{product_id}"))
    kb.row(InlineKeyboardButton(text="üîô Back to catalogue", callback_data='catalog'))

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
    if photo_paths:
        try:
            photo = await load_product_photo(photo_paths[0])
            await callback_query.message.answer_photo(
                photo, caption=message_text, parse_mode="Markdown", reply_markup=kb.as_markup()
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await callback_query.message.answer(
                f"{message_text}\n\n‚ùó –§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.", parse_mode="Markdown", reply_markup=kb.as_markup()
            )
    else:
        await callback_query.message.answer(
            f"{message_text}\n\n‚ùó –§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.", parse_mode="Markdown", reply_markup=kb.as_markup()
        )

    await callback_query.answer()


@router.callback_query(lambda c: c.data.startswith("increase_"))
async def increase_quantity(callback_query: CallbackQuery):
    data = callback_query.data.split("_")
    product_id = int(data[1])

    user_id = callback_query.from_user.id
    cart = user_cart[user_id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
    existing_item = next((item for item in cart if item['product_id'] == product_id), None)

    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 1
    if existing_item is None:
        cart.append({'product_id': product_id, 'quantity': 1})
        existing_item = cart[-1]  # –ü–æ–ª—É—á–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä

    existing_item['quantity'] += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT name, desc, price, image_path FROM catalog_products WHERE id = ?", (product_id,))
    product = cursor.fetchone()
    conn.close()

    if not product:
        await callback_query.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback_query.answer()
        return

    product_name, description, price, image_paths = product
    photo_paths = image_paths.split('|')

    quantity = existing_item['quantity']  # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    message_text = f"*{product_name}*\n\n{description}\nüí∞ *–¶–µ–Ω–∞:* {price * quantity} —Ä—É–±.\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}"

    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="‚ûñ –û—Ç–Ω—è—Ç—å 1", callback_data=f"decrease_{product_id}"))
    kb.row(InlineKeyboardButton(text="üõí Buy", callback_data=f"p_ch_buy_{product_id}_{price}_{product_name}_{quantity}"))
    kb.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å 1", callback_data=f"increase_{product_id}"))
    kb.row(InlineKeyboardButton(text="üîô Back to catalogue", callback_data='catalog'))

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
    if photo_paths:
        # message_text = f"*{product_name}*\n\n{description}\nüí∞ *–¶–µ–Ω–∞:* {price * quantity} —Ä—É–±.\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}"

        try:
            photo = await load_product_photo(photo_paths[0])
            await callback_query.message.answer_photo(photo,
                                                      text=message_text, parse_mode="Markdown",
                                                      reply_markup=kb.as_markup()
                                                      )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await callback_query.message.delete()

            await callback_query.message.answer(
                text=f"{message_text}\n\n‚ùó –§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.", parse_mode="Markdown", reply_markup=kb.as_markup()
            )
    else:
        await callback_query.message.answer(
            text=f"{message_text}\n\n‚ùó –§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.", parse_mode="Markdown", reply_markup=kb.as_markup()
        )

    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
@router.callback_query(lambda c: c.data.startswith("decrease_"))
async def decrease_quantity(callback_query: CallbackQuery):
    data = callback_query.data.split("_")
    product_id = int(data[1])

    user_id = callback_query.from_user.id
    cart = user_cart[user_id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
    existing_item = next((item for item in cart if item['product_id'] == product_id), None)
    if existing_item:
        if existing_item['quantity'] > 1:
            existing_item['quantity'] -= 1  # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        else:
            cart.remove(existing_item)  # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä, –µ—Å–ª–∏ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–ª–æ 0

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT name, desc, price, image_path FROM catalog_products WHERE id = ?", (product_id,))
    product = cursor.fetchone()
    conn.close()

    if not product:
        await callback_query.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback_query.answer()
        return

    product_name, description, price, image_paths = product
    photo_paths = image_paths.split('|')

    quantity = existing_item['quantity'] if existing_item else 0
    message_text = f"*{product_name}*\n\n{description}\nüí∞ *–¶–µ–Ω–∞:* {price * quantity} —Ä—É–±.\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}"

    kb = InlineKeyboardBuilder()
    if quantity > 1:
        kb.row(InlineKeyboardButton(text="‚ûñ –û—Ç–Ω—è—Ç—å 1", callback_data=f"decrease_{product_id}"))
    kb.row(InlineKeyboardButton(text="üõí Buy", callback_data=f"p_ch_buy_{product_id}_{price}_{product_name}_{quantity}"))
    kb.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å 1", callback_data=f"increase_{product_id}"))
    kb.row(InlineKeyboardButton(text="üîô Back to catalogue", callback_data='catalog'))

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
    if photo_paths:
        try:
            photo = await load_product_photo(photo_paths[0])
            await callback_query.message.edit_text(
                text=message_text, parse_mode="Markdown", reply_markup=kb.as_markup()
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await callback_query.message.edit_text(
                text=f"{message_text}\n\n‚ùó –§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.", parse_mode="Markdown", reply_markup=kb.as_markup()
            )
    else:
        await callback_query.message.edit_text(
            text=f"{message_text}\n\n‚ùó –§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.", parse_mode="Markdown", reply_markup=kb.as_markup()
        )

    await callback_query.answer()
