import logging
import sqlite3

from aiogram import Router
from aiogram.types import CallbackQuery, InputFile

from database.db import DB_NAME
from helpers.payments.pay_pal import pp_kb
from helpers.user.load_photos import load_product_photo

router = Router()


@router.callback_query(lambda c: c.data.startswith("buy_"))
async def buy_product(callback_query: CallbackQuery):
    product_id = int(callback_query.data.split("_")[1])
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞ —Å ID: {product_id}")

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT name, price, image_path FROM catalog_products WHERE id = ?", (product_id,))
    product = cursor.fetchone()
    conn.close()

    if not product:
        await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback_query.answer()
        return

    product_name, price, image_paths = product
    photo_paths = image_paths.split('|')

    message_text = f"üõí *{product_name}*\nüí∞ *Price:* {price} üí≤"

    if photo_paths:
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—É—Ç—å —Ñ–æ—Ç–æ
            logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —Å –ø—É—Ç–∏: {photo_paths[0]}")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–º–æ—â—å—é –≤–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
            photo = await load_product_photo(photo_paths[0])  # –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç FSInputFile
            logging.info(f"–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å –ø—É—Ç–∏: {photo_paths[0]}")

            await callback_query.message.delete()
            await callback_query.message.answer_photo(
                photo, caption=message_text,
                parse_mode="Markdown",
                # reply_markup=pp_kb(amount=price, product_id=product_id, photo_paths=image_paths)
            )
            ## –ø—Ä–æ–±–ª–µ–º–∞ –≤—ã—à–µ, –≤ –≤—ã–≤–æ–¥–µ, —Å–∞–º–æ —Ñ–æ—Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_name}: {e}")
            await callback_query.message.answer(
                f"{message_text}\n\n‚ùó –§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.", parse_mode="Markdown"
            )
    else:
        await callback_query.message.answer(
            f"{message_text}\n\n‚ùó –§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.", parse_mode="Markdown"
        )

    await callback_query.answer()


